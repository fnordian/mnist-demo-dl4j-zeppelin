{"paragraphs":[{"text":"%spark.dep\nz.reset()\nz.load(\"org.deeplearning4j:deeplearning4j-core:0.9.1\")\nz.load(\"org.nd4j:nd4j-native-platform:0.9.1\")\n","user":"anonymous","dateUpdated":"2018-03-09T18:03:55+0700","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@2e10d1e4\n"}]},"apps":[],"jobName":"paragraph_1520593393376_-1005218660","id":"20180309-180313_145794191","dateCreated":"2018-03-09T18:03:13+0700","dateStarted":"2018-03-09T18:03:55+0700","dateFinished":"2018-03-09T18:04:02+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9736","focus":true},{"title":"/home/marcus/prg/scalatest/mnistdemo/src/main/scala/ImageView.scala","text":"\nclass ImageView {\n\n  import java.awt.image._\n  import org.nd4j.linalg.api.ndarray.INDArray\n\n\n  import java.awt.image.BufferedImage\n  import java.io.IOException\n\n  import javax.swing.{ImageIcon, JLabel}\n\n  def view(image: INDArray): Unit = {\n    try {\n      val byteimage = image.stride().map(_.toByte)\n\n\n      val bufferImage = new DataBufferByte(byteimage, 28 * 28)\n\n      val bi = new BufferedImage(28, 28, BufferedImage.TYPE_BYTE_GRAY)\n\n      for ( y <- 0 to 27) {\n        for (x <- 0 to 27) {\n          val c = (256 * image.getDouble(0, x+ 28 * y)).toInt & 255\n          val rgb = (255 << 24) + (c << 16) + (c << 8) + c\n          bi.setRGB(x, y, rgb)\n          print(\" \" + (if (c > 20 ) \"X\" else \"_\"))\n        }\n        println()\n      }\n\n\n\n      val icon = new ImageIcon(bi)\n      val label = new JLabel(icon)\n    } catch {\n      case e: IOException =>\n        e.printStackTrace()\n    }\n  }\n}\n","user":"anonymous","dateUpdated":"2018-03-11T18:00:44+0700","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520766044648_1020878940","id":"20180311-180044_1486387392","dateCreated":"2018-03-11T18:00:44+0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:9735","focus":true},{"title":"/home/marcus/prg/scalatest/mnistdemo/src/main/scala/HttpDownloader.scala","text":"object HttpDownloader {\n\n  import java.io.File\n  import java.io.{BufferedOutputStream, FileOutputStream, InputStream, OutputStream}\n  import java.net.{HttpURLConnection, URL}\n\n  def fileExists(filename: String): Boolean = {\n    new File(filename).exists()\n  }\n\n  def downloadFile(url: String, filename: String): String = {\n    if (!fileExists(filename)) {\n      val connection = new URL(url).openConnection().asInstanceOf[HttpURLConnection]\n      connection.setRequestMethod(\"GET\")\n      val in: InputStream = connection.getInputStream\n      val fileToDownloadAs = new java.io.File(filename)\n      fileToDownloadAs.getParentFile().mkdirs()\n      val out: OutputStream = new BufferedOutputStream(new FileOutputStream(fileToDownloadAs))\n      val byteArray = Stream.continually(in.read).takeWhile(-1 !=).map(_.toByte).toArray\n      out.write(byteArray)\n\n      out.close()\n      in.close()\n    }\n\n    filename\n  }\n}\n","user":"anonymous","dateUpdated":"2018-03-11T18:00:45+0700","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520766045002_787721106","id":"20180311-180045_966799281","dateCreated":"2018-03-11T18:00:45+0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:9732","focus":true},{"title":"/home/marcus/prg/scalatest/mnistdemo/src/main/scala/ImageReader.scala","text":"class ImageReader(filename: String, userMaxItems: Int = 0) {\n\n  import java.io.{FileInputStream, InputStream}\n  import java.util.zip.GZIPInputStream\n\n  import org.nd4j.linalg.api.ndarray.INDArray\n  import org.nd4j.linalg.factory.Nd4j\n\n\n  def getInputStream(filename: String) =\n    new GZIPInputStream(new FileInputStream(filename))\n\n\n  def read32BitToInt(inputStream: InputStream) = {\n    var result: Int = 0\n\n    for (i <- 0 to 3) {\n      result = result << 8\n      result |= 0xff & inputStream.read()\n    }\n\n    result\n  }\n\n  def readHeader(inputStream: InputStream) = {\n    val magicNumber = read32BitToInt(inputStream)\n    val numberOfItems = read32BitToInt(inputStream)\n    val numberOfRows = read32BitToInt(inputStream)\n    val numberOfColums = read32BitToInt(inputStream)\n\n    (magicNumber, numberOfItems, numberOfRows, numberOfColums)\n  }\n\n\n  def scale(v: Double) = v / 256\n\n  def readtoArray(): INDArray = {\n    val in = getInputStream(filename)\n\n    val header = readHeader(in)\n\n    val rowSize = header._3 * header._4\n    val maxItems = if (userMaxItems == 0 || userMaxItems > header._2) header._2 else userMaxItems\n\n    println(maxItems + \" images\")\n\n    val a = Nd4j.create(maxItems, rowSize)\n\n    var (i, j) = (0, 0)\n\n    for (b <- Iterator.continually(in.read()).takeWhile(i < maxItems - 1 && -1 != _)) {\n      j = j + 1\n      if (j % rowSize == 0) {\n        j = 0\n        i = i + 1\n      }\n      a.put(i, j, scale(b.toDouble))\n    }\n\n    val example = a.getRow(0)\n    new ImageView().view(example)\n\n    a\n  }\n}\n","user":"anonymous","dateUpdated":"2018-03-11T18:00:45+0700","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520766045130_836968965","id":"20180311-180045_1172134069","dateCreated":"2018-03-11T18:00:45+0700","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9731"},{"title":"/home/marcus/prg/scalatest/mnistdemo/src/main/scala/LabelReader.scala","text":"\n\nclass LabelReader(filename: String, classCount: Int, userMaxItems: Int = 0) {\n\n  import java.io.{FileInputStream, InputStream}\n  import java.util.zip.GZIPInputStream\n\n  import org.nd4j.linalg.api.ndarray.INDArray\n  import org.nd4j.linalg.factory.Nd4j\n\n\n  def oneHotEncode(n: Int, a: Int): INDArray = {\n    val result = Nd4j.zeros(1, n)\n    result.put(0, a, 1.0)\n    result\n  }\n\n\n  def getInputStream(filename: String) =\n    new GZIPInputStream(new FileInputStream(filename))\n\n  def read32BitToInt(inputStream: InputStream) = {\n    var result: Int = 0\n\n    for (i <- 0 to 3) {\n      result = result << 8\n      result |= 0xff & inputStream.read()\n    }\n\n    result\n  }\n\n  def readHeader(inputStream: InputStream) = {\n    val magicNumber = read32BitToInt(inputStream)\n    val numberOfItems = read32BitToInt(inputStream)\n\n    (magicNumber, numberOfItems)\n  }\n\n  def readtoArray(): INDArray = {\n    val in = getInputStream(filename)\n\n    val header = readHeader(in)\n\n    val maxItems = if (userMaxItems == 0 || userMaxItems > header._2) header._2 else userMaxItems\n\n    println(maxItems + \" labels\")\n\n    val a = Nd4j.create(maxItems, classCount)\n\n    var i = 0\n\n    val labels = for (b <- Iterator.continually(in.read()).takeWhile(i < maxItems -1 && -1 != _)) {\n\n\n      if (i == 0) {\n        print(\"example label:\")\n        println(b)\n      }\n\n      val oh = oneHotEncode(classCount, b)\n      for (j <- 0 to classCount-1) {\n        a.put(i, j, oh.getScalar(0, j))\n      }\n\n      i = i + 1\n    }\n\n    val example = a.getRow(0)\n    for (i <- 0 to example.shape()(1) -1) {\n      print(example.getDouble(0, i).toByte)\n    }\n    println()\n\n    a\n  }\n}","user":"anonymous","dateUpdated":"2018-03-11T18:00:44+0700","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520766044886_746168225","id":"20180311-180044_923672376","dateCreated":"2018-03-11T18:00:44+0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:9733"},{"title":"/home/marcus/prg/scalatest/mnistdemo/src/main/scala/MnistDemo.scala","text":"object MnistDemo {\n\n  import org.deeplearning4j.nn.api.OptimizationAlgorithm\n  import org.deeplearning4j.nn.conf.NeuralNetConfiguration\n  import org.deeplearning4j.nn.conf.layers.{DenseLayer, OutputLayer}\n  import org.deeplearning4j.nn.multilayer.MultiLayerNetwork\n  import org.deeplearning4j.nn.weights.WeightInit\n  import org.nd4j.linalg.activations.Activation\n  import org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction\n\n\n  def test(net: MultiLayerNetwork): Unit = {\n    val testImages = new ImageReader(HttpDownloader.downloadFile(\"http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\", \"data/mnist/t10k-images-idx3-ubyte.gz\")).readtoArray()\n    val testLabels = new LabelReader(HttpDownloader.downloadFile(\"http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\", \"data/mnist/t10k-labels-idx1-ubyte.gz\"), 10).readtoArray()\n\n    val predictions = net.output(testImages)\n\n\n    var correctCount: Int = 0\n\n    for (i <- 0 to (predictions.shape()(0)) - 1) {\n      var c1 = -1\n      var v1 = -1.0\n      var c2 = -1\n      for (j <- 0 to 9) {\n\n        if (predictions.getDouble(i, j) > v1) {\n          c1 = j\n          v1 = predictions.getDouble(i, j)\n        }\n        if (testLabels.getDouble(i, j).intValue() == 1) {\n          c2 = j\n        }\n      }\n      if (c1 == c2) {\n        correctCount = correctCount + 1\n      }\n\n    }\n\n    println(\"correct: \" + correctCount)\n    println(\"exact match ratio: \" + (correctCount.toDouble / predictions.shape()(0).toDouble))\n  }\n\n\n  def main(args: Array[String]): Unit = {\n    val hl1Size = 256\n    val hl2Size = 128\n\n    val confBuilder = new NeuralNetConfiguration.Builder()\n      .iterations(1)\n      .learningRate(0.1)\n      .weightInit(WeightInit.XAVIER)\n      .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n      .list()\n      .layer(0, new DenseLayer.Builder().activation(Activation.RELU).nIn(28 * 28).nOut(hl1Size).build())\n      .layer(1, new DenseLayer.Builder().activation(Activation.RELU).nIn(hl1Size).nOut(hl2Size).build())\n      .layer(2, new OutputLayer.Builder().activation(Activation.SOFTMAX).nIn(hl2Size).nOut(10).lossFunction(LossFunction.MCXENT).build())\n\n\n    val conf = confBuilder.pretrain(false).backprop(true).build()\n    val net = new MultiLayerNetwork(conf)\n    net.init()\n\n    val maxItems = 1000\n\n    net.setInput(new ImageReader(HttpDownloader.downloadFile(\"http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\", \"data/mnist/train-images-idx3-ubyte.gz\"), maxItems).readtoArray())\n    net.setLabels(new LabelReader(HttpDownloader.downloadFile(\"http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\", \"data/mnist/train-labels-idx1-ubyte.gz\"), 10, maxItems).readtoArray())\n    net.setInputMiniBatchSize(10)\n\n    val numberOfEpochs = 10\n    for (epoch <- 1 to numberOfEpochs) {\n      net.fit()\n\n    }\n\n    test(net)\n  }\n\n}\n","user":"anonymous","dateUpdated":"2018-03-11T18:02:48+0700","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520766044766_693842375","id":"20180311-180044_1850737096","dateCreated":"2018-03-11T18:00:44+0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:9734"},{"title":"new note","text":"  Main.main(Array[String]())","user":"anonymous","dateUpdated":"2018-03-11T17:55:46+0700","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1000 images\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X X X X X _ _ _\n _ _ _ _ _ _ _ _ _ X X X X X X X X X X X X X X X X _ _ _\n _ _ _ _ _ _ _ _ X X X X X X X X X X X X X X X X _ _ _ _\n _ _ _ _ _ _ _ _ _ X X X X X X X X X X _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ X X X X X X _ _ X X _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X X _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X X X _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X X X _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X X X _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X X X X X _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ X X X X X X X X X _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ X X X X X X X X X _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ X X X X X X X X _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ X X X X X X X X X _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ X X X X X X X _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n1000 labels\nexample label:5\n0000010000\n10000 images\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ X X X X X X _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ X X X X X X X X X X X X X X X X _ _ _ _ _\n _ _ _ _ _ _ _ X X X X X X X X X X X X X X X X _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ X _ X X X X X X X X _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ X X X X _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ X X X X X _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ X X X X X _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ X X X _ _ _ _ _ _ _ _ _ _ _ _ _ _\n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n10000 labels\nexample label:7\n0000000100\ncorrect: 6300\nexact match ratio: 0.63\n"}]},"apps":[],"jobName":"paragraph_1520568842945_-1107572561","id":"20180309-111402_1341197140","dateCreated":"2018-03-09T11:14:02+0700","dateStarted":"2018-03-11T17:55:46+0700","dateFinished":"2018-03-11T17:55:56+0700","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9737"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1520763169602_-429927608","id":"20180311-171249_1068135651","dateCreated":"2018-03-11T17:12:49+0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:9738"}],"name":"MNIST-Demo with dl4j","id":"2D7CS3X2M","angularObjects":{"2D94EGUGU:shared_process":[],"2D7ZV4X3G:shared_process":[],"2D7MXK87Q:shared_process":[],"2DA7X7D9R:shared_process":[],"2D81A88C6:shared_process":[],"2D9Z8V8QD:shared_process":[],"2DA54YDRJ:shared_process":[],"2DB22TW2D:shared_process":[],"2DASFHGA2:shared_process":[],"2D8FZ4F9G:shared_process":[],"2D9JZV9EZ:shared_process":[],"2D8DHE3HX:shared_process":[],"2D888PWS3:shared_process":[],"2D7C887EQ:shared_process":[],"2D89KTNHS:shared_process":[],"2D7AG9F9E:shared_process":[],"2D8U8HBNN:shared_process":[],"2D8DUDEN7:shared_process":[],"2D9MXMHBB:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}